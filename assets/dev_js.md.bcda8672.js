import{_ as a,c as i,o as e,a as s}from"./app.58320140.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 数据类型","slug":"_1-数据类型","link":"#_1-数据类型","children":[]},{"level":2,"title":"javascript使用了自动判断类型，所以使用===表示数值和数据类型都相等，而==仅仅表示数值相等。","slug":"javascript使用了自动判断类型-所以使用-表示数值和数据类型都相等-而-仅仅表示数值相等。","link":"#javascript使用了自动判断类型-所以使用-表示数值和数据类型都相等-而-仅仅表示数值相等。","children":[]},{"level":2,"title":"2.真假值","slug":"_2-真假值","link":"#_2-真假值","children":[]},{"level":2,"title":"3.函数","slug":"_3-函数","link":"#_3-函数","children":[]},{"level":2,"title":"4.array","slug":"_4-array","link":"#_4-array","children":[]},{"level":2,"title":"5.对象","slug":"_5-对象","link":"#_5-对象","children":[]},{"level":2,"title":"结束","slug":"结束","link":"#结束","children":[]}],"relativePath":"dev/js.md"}'),p={name:"dev/js.md"},t=s(`<p><img src="https://upload-images.jianshu.io/upload_images/5415189-90d2970b0c09108e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前言"></p><p>刷完了udacity上JS的入门课，纯粹为了学习开发小程序而补的前端知识。</p><p>一开始在SoloLearn上最先接触的JS，只用了三个小时不到就把证书刷下来了，这毕竟是我在SoloLearn的第一个证书，先炫一下哈！</p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-57405a5d2fc54e65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SoloLearn证书"></p><p>进入正题，JavaScript起初为了出名特地把名字取得和Java很像，因为Java一直都很火，Java web, 移动开发，服务器。当然如果学过java在去学JS得话，就会感觉者这门语言非常得友好，沿袭了Java的大部分风格，这里就说几点不同吧。</p><h2 id="_1-数据类型" tabindex="-1">1. 数据类型 <a class="header-anchor" href="#_1-数据类型" aria-hidden="true">#</a></h2><p>#####1.1自动判断类型。 <img src="https://upload-images.jianshu.io/upload_images/5415189-1206601061b03fb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="JavaScript的数据类型"> 在传统的语言里，要定义变量，都要是使用int ，float , double ,boolean这些关键字，但是在JS里完全不用。直接使用var关键字，变量的数据类型完全由系统自动判断。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">#java8,c,c++都要这么写</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">int age= 25;</span></span>
<span class="line"><span style="color:#A6ACCD;">float pi = 3.14;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">#听说Java9也使用var 自动判断，不过，本人还是坚守Java8.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>而在JS里就可以这么写：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">var name = &#39;javascript&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">var age = 25;</span></span>
<span class="line"><span style="color:#A6ACCD;">var pi = 3.14;</span></span>
<span class="line"><span style="color:#A6ACCD;">var message = [&#39;hello&#39;, &#39;nihao&#39;];</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">//注：JavaScript里single quote 和 double quote 没有区别，本人更加倾向single quote,JS好多地方和python很像。</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h5 id="_1-2-字符串拼接" tabindex="-1">1.2 字符串拼接 <a class="header-anchor" href="#_1-2-字符串拼接" aria-hidden="true">#</a></h5><p>javaScript的字符串自动拼接，可以在这里把number直接转成字符串。 <img src="https://upload-images.jianshu.io/upload_images/5415189-ca17f5a347d43654.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字符串自动拼接"></p><p><strong>注：console.log()是输出日志，相当于Java的System.out.print()。</strong></p><hr><h5 id="_1-3-绝对相等" tabindex="-1">1.3 绝对相等 <a class="header-anchor" href="#_1-3-绝对相等" aria-hidden="true">#</a></h5><h2 id="javascript使用了自动判断类型-所以使用-表示数值和数据类型都相等-而-仅仅表示数值相等。" tabindex="-1">javascript使用了自动判断类型，所以使用===表示数值和数据类型都相等，而==仅仅表示数值相等。 <img src="https://upload-images.jianshu.io/upload_images/5415189-83b9b2a9a9dfa14d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="JavaScript绝对相等"> <a class="header-anchor" href="#javascript使用了自动判断类型-所以使用-表示数值和数据类型都相等-而-仅仅表示数值相等。" aria-hidden="true">#</a></h2><p><img src="https://upload-images.jianshu.io/upload_images/5415189-cf3c8dc3bc6a79ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实际测试"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-3a4bd6f0dce5df63.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="比较运算符"></p><h2 id="_2-真假值" tabindex="-1">2.真假值 <a class="header-anchor" href="#_2-真假值" aria-hidden="true">#</a></h2><p>在JavaScript里，视为真值的有non-zero number, non-empty string, object, array, true。 <img src="https://upload-images.jianshu.io/upload_images/5415189-207e8750e8aaec98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Truthy Values"></p><p>在JavaScript里，视为假值的有null, undefined, 0, empty string, NaN, fasle。 <img src="https://upload-images.jianshu.io/upload_images/5415189-3ee6b6c0b64f57d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Fasly Values"></p><p><em>三元运算符是从c语言一直沿袭下来的，Java也有。不过没怎么常用。</em><img src="https://upload-images.jianshu.io/upload_images/5415189-e992e43a4809b1f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三元运算符"></p><h2 id="_3-函数" tabindex="-1">3.函数 <a class="header-anchor" href="#_3-函数" aria-hidden="true">#</a></h2><p>JavaScript里函数使用function()关键字。 <img src="https://upload-images.jianshu.io/upload_images/5415189-6341165c0dbe9c38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="函数"></p><h4 id="_3-1-返回与日志-输出与返回" tabindex="-1">3.1 返回与日志（输出与返回） <a class="header-anchor" href="#_3-1-返回与日志-输出与返回" aria-hidden="true">#</a></h4><p><img src="https://upload-images.jianshu.io/upload_images/5415189-a5381bb23b172984.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="console.log()"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-98d4425e4b7da977.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="undefined"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-8d4fa2a5be50297a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出与返回"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-273a4a9a5db09305.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出与返回"></p><h4 id="_3-2-作用域" tabindex="-1">3.2 作用域 <a class="header-anchor" href="#_3-2-作用域" aria-hidden="true">#</a></h4><p><img src="https://upload-images.jianshu.io/upload_images/5415189-b17a6a196c0a981b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="引用传递"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-69f0d611393edd8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="值传递"></p><h4 id="_3-3-提升" tabindex="-1">3.3 提升 <a class="header-anchor" href="#_3-3-提升" aria-hidden="true">#</a></h4><p>1.JavaScript 会将函数声明和变量声明提升到当前作用域的顶部。</p><p>2.变量赋值不会提升。</p><p>3.在脚本的顶部声明函数和变量，这样语法和行为就会相互保持一致。 <img src="https://upload-images.jianshu.io/upload_images/5415189-1ad1f9629d81e67a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提升"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-75d02f9456f49d1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提升导致的错误（1）"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-d8fb279d96d7d789.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="提升导致的错误（2）"></p><h5 id="_3-4-函数表达式" tabindex="-1">3.4 函数表达式 <a class="header-anchor" href="#_3-4-函数表达式" aria-hidden="true">#</a></h5><p>匿名函数，有点类似lambda表达式。可以把函数储存在变量中。</p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-6a616ec51720c244.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="函数表达式"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-64fce095fe26aed8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="匿名函数表达式"></p><p>所有函数声明提升和加载后，脚本才会实际地运行。函数表达式不会提升，因为它们涉及变量赋值，只有变量声明会提升。在解析器在脚本中到达该表达式之前，函数表达式不会加载。</p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-d1af1d1248a355f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="函数对比"></p><h5 id="_3-4-1-回调" tabindex="-1">3.4.1 回调 <a class="header-anchor" href="#_3-4-1-回调" aria-hidden="true">#</a></h5><p><img src="https://upload-images.jianshu.io/upload_images/5415189-3b8a8c607746b420.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回调"></p><h5 id="_3-4-2-有名称的函数表达式" tabindex="-1">3.4.2 有名称的函数表达式 <a class="header-anchor" href="#_3-4-2-有名称的函数表达式" aria-hidden="true">#</a></h5><p><img src="https://upload-images.jianshu.io/upload_images/5415189-7b6db2972cdb1976.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有名称的函数表达式"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-b83da5d47316d838.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命名函数表达式"></p><h5 id="_3-4-3-内嵌函数表达式" tabindex="-1">3.4.3 内嵌函数表达式 <a class="header-anchor" href="#_3-4-3-内嵌函数表达式" aria-hidden="true">#</a></h5><p>这种内嵌函数表达式，在python中称之为把函数视为一等对象。 <img src="https://upload-images.jianshu.io/upload_images/5415189-f254df1e3b75db1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="内嵌函数表达式"> 函数表达式，将函数内嵌传递给其他函数的语法在 JavaScript 中很常见</p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-fb6c2319a36f287d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="内嵌函数表达式"></p><h2 id="_4-array" tabindex="-1">4.array <a class="header-anchor" href="#_4-array" aria-hidden="true">#</a></h2><p>JavaScript的array感觉更像是python的list，用了这么久，感觉都是一样的。 <img src="https://upload-images.jianshu.io/upload_images/5415189-8449e39168706b61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="array"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-b1a30695bb8bb997.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="array method"></p><h5 id="array-loop" tabindex="-1">array loop <a class="header-anchor" href="#array-loop" aria-hidden="true">#</a></h5><p>传统的遍历array。 <img src="https://upload-images.jianshu.io/upload_images/5415189-6bd750c984ffcadd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>forEach()更像是一种迭代。 <img src="https://upload-images.jianshu.io/upload_images/5415189-a97dd0685ad1a86a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="forEach()"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-19bac43ac0cbe6b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="forEach()回调函数"></p><p>map()返回一个新的array <img src="https://upload-images.jianshu.io/upload_images/5415189-8970f1519f4830f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="_5-对象" tabindex="-1">5.对象 <a class="header-anchor" href="#_5-对象" aria-hidden="true">#</a></h2><p><img src="https://upload-images.jianshu.io/upload_images/5415189-235c22330df2c81b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h5 id="_5-1-typeof" tabindex="-1">5.1 typeof <a class="header-anchor" href="#_5-1-typeof" aria-hidden="true">#</a></h5><p>既然是自动判断类型的语言，就必然要有用来判断变量类型的函数。在python里是type()，在JavaScript里是typeof()。 <img src="https://upload-images.jianshu.io/upload_images/5415189-94f75fa83d1b3c36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="typeof"></p><h5 id="_5-2-创建对象" tabindex="-1">5.2 创建对象 <a class="header-anchor" href="#_5-2-创建对象" aria-hidden="true">#</a></h5><p>第一次看到这个时候感觉想c语言的结构体，但是后来想了想，感觉Javascript的对象更像散列函数。 <img src="https://upload-images.jianshu.io/upload_images/5415189-4c633c057a013776.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建对象"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-c0b3f8678df0bc5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-bad14ec650686f9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命名规则"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-79c72273a461e43f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建 JavaScript 对象实例"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-1df78b9950319a33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="把属性添加到 JavaScript 对象"></p><p><img src="https://upload-images.jianshu.io/upload_images/5415189-ea214f6084b8107c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="把方法添加到 JavaScript 对象"></p><h2 id="结束" tabindex="-1">结束 <a class="header-anchor" href="#结束" aria-hidden="true">#</a></h2><p><img src="https://upload-images.jianshu.io/upload_images/5415189-1a931cb51bce4f24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结束语"></p>`,73),o=[t];function r(n,g,l,d,m,h){return e(),i("div",null,o)}const _=a(p,[["render",r]]);export{c as __pageData,_ as default};
